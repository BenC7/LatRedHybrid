# This file was *autogenerated* from the file BKZ_cost.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_0p366078 = RealNumber('0.366078'); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_60 = Integer(60); _sage_const_0p00405892 = RealNumber('0.00405892'); _sage_const_0p000784314 = RealNumber('0.000784314'); _sage_const_1 = Integer(1); _sage_const_34p9018 = RealNumber('34.9018'); _sage_const_0p292 = RealNumber('0.292'); _sage_const_0p337913 = RealNumber('0.337913'); _sage_const_6p125 = RealNumber('6.125')
gp.read("bkzsim.gp")

conserv = True

#computes the estimated cost of bkz as a function of the blocksize, number of rounds and dimension of the lattice
def bkzoperations(bs,dim,rounds):
	LogNodes = _sage_const_0p00405892 *bs**_sage_const_2  - _sage_const_0p337913 *bs + _sage_const_34p9018 
	if conserv: LogNodes = _sage_const_0p000784314 *bs**_sage_const_2  + _sage_const_0p366078 *bs - _sage_const_6p125 
	if rounds != _sage_const_0 : return ZZ(round(LogNodes + log(dim*rounds,_sage_const_2 ) + _sage_const_7 ))
	else: return ZZ(round(LogNodes + log(dim,_sage_const_2 ) + _sage_const_7 ))

def bkzoperations2(bs,dim,rounds):
	LogNodes = _sage_const_0p292 *bs
	return ZZ(round(LogNodes + log(bs,_sage_const_2 )))

#binary search tree ala schanck to speed up finding optimal BKZ params
def binarysearch(dim,val,low,high):
	if(low >= high -_sage_const_1 ): return low
	temp = ceil((low + high)/_sage_const_2 )
	if(-gp.simulate(dim,temp,val)[_sage_const_2 ] <=val): return binarysearch(dim,val,temp,high)
	else: return binarysearch(dim,val,low,temp)

#binary search tree ala schanck to speed up finding dm
def binarysearchdm(p,val,low,high):
	if(low >= high -_sage_const_1 ): return low
	temp = ceil((low + high)/_sage_const_2 )
	if(rejProb(p,temp) <=val): return binarysearchdm(p,val,temp,high)
	else: return binarysearchdm(p,val,low,temp)

def bkzcosts(dim,hermite):
	b = binarysearch(dim,-hermite,_sage_const_60 ,dim)+_sage_const_1 
	beta = gp.simulate(dim,b-_sage_const_1 ,hermite)[_sage_const_2 ]
	iterations = ZZ(gp.simulate(dim,b,beta)[_sage_const_3 ])
	return bkzoperations(b,dim,iterations)












